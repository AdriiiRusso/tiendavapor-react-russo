{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\nexport const fire = {};\n\nfire.setCollection = (collectionName, array, id, callback) => {\n  let fr = db.collection(collectionName);\n  array.forEach(item => {\n    item[id] ? fr.doc(item[id]).set(item) : fr.add(item).then(docRef => {\n      console.log(\"Document written with ID: \", docRef.id);\n      callback(docRef.id);\n    }).catch(error => {\n      console.error(\"Error adding document: \", error);\n    });\n  });\n};\n\nfire.updateCollectionDoc = (collectionName, doc, values) => {\n  db.collection(collectionName).doc(doc).update(values).catch(error => {\n    console.error(\"Error updating document: \", error);\n  });\n};\n\nfire.getCollection = (callback, collection, opt = {}) => {\n  let fireGet = db.collection(collection);\n  let dc = opt.doc ? fireGet.doc(opt.doc) : fireGet;\n  let wh = opt.where ? fireGet.where(opt.where[0], opt.where[1], opt.where[2]) : dc;\n  let geter = opt.sort ? wh.orderBy(opt.sort.key, opt.sort.order) : wh;\n  geter.get().then(querySnapshot => {\n    opt.doc && !querySnapshot.exists ? callback(null) : callback(opt.doc ? [{ ...querySnapshot.data(),\n      id: querySnapshot.id\n    }] : querySnapshot.docs.map(i => {\n      return { ...i.data(),\n        id: i.id\n      };\n    }));\n  }).catch(error => {\n    console.error(\"Error geting documents: \", error);\n  });\n};","map":{"version":3,"sources":["C:/Users/Adriii/Desktop/tiendavapor-react-russo/src/Firebase.js"],"names":["firebase","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","initializeApp","db","firestore","fire","setCollection","collectionName","array","id","callback","fr","collection","forEach","item","doc","set","add","then","docRef","console","log","catch","error","updateCollectionDoc","values","update","getCollection","opt","fireGet","dc","wh","where","geter","sort","orderBy","key","order","get","querySnapshot","exists","data","docs","map","i"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nconst db  = firebase.firestore();\r\n\r\nexport const fire = {}\r\n\r\nfire.setCollection = (collectionName, array, id, callback) => {\r\n  let fr = db.collection(collectionName)\r\n  array.forEach(item => \r\n    { item[id] ? \r\n        fr.doc(item[id]).set(item)\r\n        :\r\n        fr.add(item)\r\n\r\n      .then (docRef => {\r\n        console.log (\"Document written with ID: \", docRef.id) \r\n        callback(docRef.id)\r\n      })\r\n      .catch(error => {\r\n        console.error (\"Error adding document: \", error) \r\n      })\r\n    }\r\n  )\r\n}\r\n\r\nfire.updateCollectionDoc = (collectionName, doc, values) => {\r\n  db.collection(collectionName)\r\n    .doc(doc)\r\n    .update(values)\r\n    .catch(error => {console.error (\"Error updating document: \", error)})\r\n}\r\n\r\nfire.getCollection = (callback, collection, opt={}) => {\r\n  let fireGet = db.collection(collection);\r\n  let dc = opt.doc ? fireGet.doc(opt.doc) : fireGet\r\n  let wh = opt.where ? fireGet.where(opt.where[0],opt.where[1],opt.where[2]) : dc\r\n  let geter =  opt.sort  ? wh.orderBy(opt.sort.key,opt.sort.order) : wh\r\n\r\n  geter.get()\r\n  .then( querySnapshot => {\r\n    opt.doc && !querySnapshot.exists ? callback(null)\r\n    :\r\n    callback(opt.doc ?\r\n      [{...querySnapshot.data(),id:querySnapshot.id}]\r\n      :\r\n      querySnapshot.docs.map( i => {\r\n        return({...i.data(), id:i.id})\r\n      }))\r\n    })\r\n    .catch( error => {\r\n      console.error(\"Error geting documents: \", error)\r\n    })\r\n  };\r\n  \r\n"]},"metadata":{},"sourceType":"module"}